/** @jsx wp.element.createElement */

import { PannelUltimateBgControl } from '../common/PannelUltimateBgControl.js';

export function ControlsSetParent(args) {

  /* definitions */

  const props = args.propsObject;
  const att = args.propsObject.attributes;

  const { __ } = wp.i18n;
  const { MediaUpload, MediaUploadCheck, MediaPlaceholder, MediaReplaceFlow } = wp.blockEditor;
  const { BlockVerticalAlignmentToolbar, BlockControls, InspectorControls, AlignmentToolbar } = wp.blockEditor;
  const {
    Button, ButtonGroup, ToolbarGroup, Toolbar, ToolbarButton, Dashicon, SVG, Path, PanelBody, PanelRow, SelectControl, ColorIndicator,
    RangeControl, Flex, FlexItem, FlexBlock, Icon, CheckboxControl, Disabled, ToggleControl, __experimentalRadioGroup, __experimentalRadio
  } = wp.components;
  const { useState, useEffect, Fragment } = wp.element;
  const { useSelect } = wp.data;

  var slickPath = "#hero-gallery-"+att.blockID;
  function stop() {
    jQuery(slickPath+".slick-initialized").slick( 'unslick' );
  }
  function start() {
    jQuery(slickPath).not('.slick-initialized').slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: att.arrows,
      dots: att.dots,
      infinite: att.infinite,
      autoplay: att.autoplay,
      fade: att.fade,
      pauseOnHover: true,
      adaptiveHeight: false,
      pauseOnFocus: true,
      touchMove: false,
      swipeToSlide: false,
    });
  }
  function prevSlide() {
    jQuery(slickPath).slick( 'slickPrev' );
  }
  function nextSlide() {
    jQuery(slickPath).slick( 'slickNext' );
  }
  function addEmptySlide() {
    var block = wp.blocks.createBlock('k-blocks-slick-hero-child/k-blocks', { content: 'test' });
    wp.data.dispatch('core/block-editor').insertBlocks(block, 0, props.clientId);
  }
  function safelySetAttribute( attribute, newcontent ) {
    props.setAttributes( { [attribute]: newcontent } );
  }

  useEffect(() => {
    if ( props.editMode ) stop();
    else start();
  });

  return (

    <Fragment>

      <BlockControls>

        { !props.editMode &&
          <Toolbar>
            <ToolbarButton
              icon='arrow-left-alt2'
              title='Previous Slide'
              onClick={ prevSlide }
            />
            <ToolbarButton
              icon='arrow-right-alt2'
              title='Next Slide'
              onClick={ nextSlide }
            />
          </Toolbar>
        }
        { props.editMode &&
          <Toolbar>
            <ToolbarButton
              icon='plus-alt2'
              title='Add new slide before'
              onClick={ addEmptySlide }
            />
          </Toolbar>
        }
        <Toolbar>
          <ToolbarButton
            icon='edit'
            title='Edit mode'
            onClick={ props.toggleEditMode }
            isActive = { props.editMode }
          />
        </Toolbar>
      </BlockControls>

      <InspectorControls>

        <PanelBody title={__('Slider options')} >
          <Button
            icon='edit'
            title='Edit mode'
            isSecondary
            style = { { 'marginTop': '0.5rem', 'marginBottom': '0.5rem',  } }
            onClick={ props.toggleEditMode }
            isActive = { props.editMode }
          >
            { props.editMode && __('Preview mode') } { !props.editMode && __('Edit mode') }
          </Button>
          { props.editMode &&
            <Fragment>
              <RangeControl
                value={ att.minHeight }
                onChange={ ( newvalue ) => safelySetAttribute( 'minHeight', newvalue ) }
                min={ 0 }
                max={ 60 }
                label={ __('Slider height'+' (Em)') }
                type="Em"
              />
              <ToggleControl
                label={__('Arrows')}
                checked={ att.arrows }
                onChange={ () => safelySetAttribute( 'arrows', !att.arrows )  }
              />
              <ToggleControl
                label={__('Dots')}
                checked={ att.dots }
                onChange={ () => safelySetAttribute( 'dots', !att.dots )  }
              />
              <ToggleControl
                label={__('Infinite')}
                checked={ att.infinite }
                onChange={ () => safelySetAttribute( 'infinite', !att.infinite )  }
              />
              <ToggleControl
                label={__('Autoplay')}
                checked={ att.autoplay }
                onChange={ () => safelySetAttribute( 'autoplay', !att.autoplay )  }
              />
              <ToggleControl
                label={__('Fade')}
                checked={ att.fade }
                onChange={ () => safelySetAttribute( 'fade', !att.fade )  }
              />
              <ToggleControl
                label={__('Pause autoplay on hover')}
                checked={ att.pauseOnHover }
                onChange={ () => safelySetAttribute( 'pauseOnHover', !att.pauseOnHover )  }
              />
            </Fragment>
          }
        </PanelBody>


        { props.editMode &&
          <PanelBody title={__('Control style options')} >

            { att.arrows &&
              <Fragment>
                <Flex style = { { 'marginBottom': '1rem', 'marginTop': '0.5rem'  } }>
                  <FlexItem className="css-wdf2ti-Wrapper">
                    <label>Arrows Color</label>
                  </FlexItem>
                  <FlexItem>
                    <ButtonGroup>
                      <Button className={ att.arrowsColorClass==''?'is-primary':'' } onClick={ () => props.setAttributes({ arrowsColorClass: "" }) }>Dark</Button>
                      <Button className={ att.arrowsColorClass=='light-arrows'?'is-primary':'' } onClick={ () => props.setAttributes({ arrowsColorClass: "light-arrows" }) }>Light</Button>
                    </ButtonGroup>
                  </FlexItem>
                </Flex>
                <Flex style = { { 'marginBottom': '0.5rem'  } }>
                  <FlexItem className="css-wdf2ti-Wrapper">
                    <label>Arrow Size</label>
                  </FlexItem>
                  <FlexItem>
                    <SelectControl
                      value={ att.arrowsSizeClass }
                      options={ [
                        { label: 'Big', value: 'big-arrows' },
                        { label: 'Medium', value: '' },
                        { label: 'Small', value: 'small-arrows' },
                      ] }
                      onChange={ ( size ) => props.setAttributes({ arrowsSizeClass: size }) }
                    />
                  </FlexItem>
                </Flex>
                <Flex style = { { 'marginBottom': '2rem',  } }>
                  <FlexItem className="css-wdf2ti-Wrapper">
                    <label>Arrow Position</label>
                  </FlexItem>
                  <FlexItem>
                    <SelectControl
                      value={ att.arrowsPositionClass }
                      options={ [
                        { label: 'Outer', value: 'arrows-outer' },
                        { label: 'Inner', value: 'arrows-inner' },
                        { label: 'Outer on desktop', value: '' },
                      ] }
                      onChange={ ( pos ) => props.setAttributes({ arrowsPositionClass: pos }) }
                    />
                  </FlexItem>
                </Flex>
              </Fragment>
            }

            { att.dots &&
              <Fragment>
                <Flex style = { { 'marginBottom': '1rem', 'marginTop': '0.5rem'  } }>
                  <FlexItem className="css-wdf2ti-Wrapper">
                    <label>Dots Color</label>
                  </FlexItem>
                  <FlexItem>
                    <ButtonGroup>
                      <Button className={ att.dotsColorClass==''?'is-primary':'' } onClick={ () => props.setAttributes({ dotsColorClass: "" }) }>Dark</Button>
                      <Button className={ att.dotsColorClass=='light-dots'?'is-primary':'' } onClick={ () => props.setAttributes({ dotsColorClass: "light-dots" }) }>Light</Button>
                    </ButtonGroup>
                  </FlexItem>
                </Flex>
                <Flex  style = { { 'marginBottom': '0.5rem'  } }>
                  <FlexItem className="css-wdf2ti-Wrapper">
                    <label>Dots Size</label>
                  </FlexItem>
                  <FlexItem>
                    <SelectControl
                      value={ att.dotsSizeClass }
                      options={ [
                        { label: 'Big', value: 'big-dots' },
                        { label: 'Medium', value: '' },
                        { label: 'Small', value: 'small-dots' },
                      ] }
                      onChange={ ( size ) => props.setAttributes({ dotsSizeClass: size }) }
                    />
                  </FlexItem>
                </Flex>
                <Flex style = { { 'marginBottom': '2rem',  } }>
                  <FlexItem className="css-wdf2ti-Wrapper">
                    <label>Dots Position</label>
                  </FlexItem>
                  <FlexItem>
                    <SelectControl
                      value={ att.dotsPositionClass }
                      options={ [
                        { label: 'Outer', value: '' },
                        { label: 'Inner', value: 'dots-inner' },
                      ] }
                      onChange={ ( pos ) => props.setAttributes({ dotsPositionClass: pos }) }
                    />
                  </FlexItem>
                </Flex>
              </Fragment>
            }

          </PanelBody>
        }


      </InspectorControls>

    </Fragment>

  );

}
