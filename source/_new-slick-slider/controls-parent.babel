/** @jsx wp.element.createElement */

import { PannelUltimateBgControl } from '../common/PannelUltimateBgControl.js';

export function ControlsSetParent(args) {

  /* definitions */

  const props = args.propsObject;
  const att = args.propsObject.attributes;

  const { __ } = wp.i18n;
  const { MediaUpload, MediaUploadCheck, MediaPlaceholder, MediaReplaceFlow } = wp.blockEditor;
  const { BlockVerticalAlignmentToolbar, BlockControls, InspectorControls, AlignmentToolbar } = wp.blockEditor;
  const { Button, ToolbarGroup, Toolbar, ToolbarButton, Dashicon, SVG, Path, PanelBody, PanelRow, SelectControl } = wp.components;
  const { useState, useEffect, Fragment } = wp.element;
  const { useSelect } = wp.data;

  var slickPath = ".hero-gallery-"+att.blockID+".backend>.block-editor-inner-blocks>.block-editor-block-list__layout";
  function stop() {
    jQuery(slickPath+'.slick-initialized').slick( 'unslick' );
  }
  function start() {
    jQuery(slickPath).not('.slick-initialized').slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      draggable: false,
      adaptiveHeight: false
    });
  }
  function prevSlide() {
    jQuery(slickPath).slick( 'slickPrev' );
  }
  function nextSlide() {
    jQuery(slickPath).slick( 'slickNext' );
  }
  function addEmptySlide() {
    var block = wp.blocks.createBlock('k-blocks-slick-test-child/k-blocks', { content: 'test' });
    wp.data.dispatch('core/block-editor').insertBlocks(block, 0, props.clientId);
  }

  useEffect(() => {
    if (props.editMode) stop();
    else start();
  });

  /* output */

  return (

    <Fragment>

      <BlockControls>
        { !props.editMode &&
          <Toolbar>
            <ToolbarButton
              icon='arrow-left-alt2'
              title='Previous Slide'
              onClick={ prevSlide }
            />
            <ToolbarButton
              icon='arrow-right-alt2'
              title='Next Slide'
              onClick={ nextSlide }
            />
          </Toolbar>
        }
        { props.editMode &&
          <Toolbar>
            <ToolbarButton
              icon='plus-alt2'
              title='Add new slide before'
              onClick={ addEmptySlide }
            />
          </Toolbar>
        }
          <Toolbar>
            <ToolbarButton
            icon='edit'
            title='Edit mode'
            onClick={ props.toggleEditMode }
            isActive = { props.editMode }
          />
        </Toolbar>
      </BlockControls>

      <InspectorControls>
      </InspectorControls>

    </Fragment>

  );

}
