/** @jsx wp.element.createElement */

import { PannelUltimateBgControl } from '../common/PannelUltimateBgControl.js';

export function Controls(args) {

  /* definitions */

  const props = args.propsObject;

  const { __ } = wp.i18n;
  const { MediaUpload, MediaUploadCheck, MediaPlaceholder, MediaReplaceFlow } = wp.blockEditor;
  const { BlockVerticalAlignmentToolbar, BlockControls, InspectorControls, AlignmentToolbar } = wp.blockEditor;
  const { Button, ToolbarGroup, Toolbar, ToolbarButton, Dashicon, SVG, Path, PanelBody, PanelRow, SelectControl } = wp.components;
  const { useState, useEffect, Fragment } = wp.element;

  const WideBlockButtonThird = () => (
    <svg width="20" height="24" viewBox="0 0 20 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect x="1" y="3" width="18" height="18" rx="1" fill="white"/>
      <rect x="3" y="6" width="6" height="12" fill="black"/>
      <path d="M10 12L17 8V16L10 12Z" fill="black"/>
    </svg>
  )

  function selectMedia(media) {
    switch (media.type) {
      case 'image':
        props.setAttributes( { image: "url('"+media.url+"')" } );
        props.setAttributes( { video: "" } );
        break;
      case 'video':
        props.setAttributes( { image: "unset" } );
        props.setAttributes( { video: media.url } );
        break;
    }
    console.log(media);
  }

  /* output */

  return (

    <Fragment>

      {/* BLOCK CONTROLS
      ========================================================================*/}

      <BlockControls>
        <ToolbarButton
          icon={ "align-pull-left" }
          label={ __( "Show media on right" ) }
          onClick = { () => { props.setAttributes( { reverse: false } ) } }
          isActive = { !props.attributes.reverse }
        />
        <ToolbarButton
          icon={ "align-pull-right" }
          label={ __( "Show media on left" ) }
          onClick = { () => { props.setAttributes( { reverse: true } ) } }
          isActive = { props.attributes.reverse }
        />
        <ToolbarButton
          icon={ WideBlockButtonThird }
          label={ __( "Make media smaller (1/3)" ) }
          onClick = { () => { props.setAttributes( { third: !props.attributes.third } ) } }
          isActive = { props.attributes.third }
        />
        <BlockVerticalAlignmentToolbar
          onChange={ ( newcontent ) => { props.setAttributes( { valign: newcontent } ); } }
          value={ props.attributes.valign }
        />
        { !( props.attributes.image == 'unset' && props.attributes.video == '' ) && (
          <MediaReplaceFlow
            mediaURL={ props.attributes.image }
            allowedTypes={ [ 'image', 'video' ] }
            //accept="image/*"
            onSelect={ selectMedia }
          />
        )}
      </BlockControls>


      {/* BLOCK INSPECTOR
      =======================================================================*/}

      <InspectorControls>
        <PannelUltimateBgControl
          // first toolbar: color block
          colorValue={ props.attributes.color }
          onColorChange={ ( newVal ) => props.setAttributes({ color: newVal }) }
          bgColorValue={ props.attributes.bgColor }
          onBgColorChange={ ( newVal ) => props.setAttributes({ bgColor: newVal }) }
          // second toolbar: image block
          bgImgUrlValue={ props.attributes.bgImage }
          bgImgIdValue={ props.attributes.bgImageId }
          onBgImgSelect={ ( newVal ) => props.setAttributes({ bgImage: newVal.url, bgImageId: newVal.id }) }
          onSetDefaultClick={ () => props.setAttributes({ bgImage: "none", bgImageId: 0 }) }
          // bg style for second toolbar: optional
          bgStyleValue={ props.attributes.bgImageType }
          onBgStyleChange={ ( newVal ) => props.setAttributes({ bgImageType: newVal }) }
          // third toolbar: gradient overlay block
          gradientOvelayValue={ props.attributes.bgGradient }
          onGradientOverlayChange={ ( newVal ) => props.setAttributes({ bgGradient: newVal }) }
        />
      </InspectorControls>

    </Fragment>
  );

}
